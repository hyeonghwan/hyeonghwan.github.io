{"version":3,"file":"component---src-pages-develop-index-jsx-2e154ab7ed952a763985.js","mappings":"iOASA,MAAMA,EAAYC,IAAgB,IAAf,MAAEC,GAAOD,EAC1B,MACM,EAACE,EAAW,EAACC,IAAiBC,EAAAA,EAAAA,UAAS,OACvC,EAACC,EAAY,EAACC,IAAkBF,EAAAA,EAAAA,UAAS,IACzC,EAACG,EAAW,EAACC,IAAiBJ,EAAAA,EAAAA,UAAS,KAM7CK,EAAAA,EAAAA,YAAU,KAmCRD,GAAeE,IACb,MAAM,GAANC,QAAAC,EAAAA,EAAAA,GAAWF,IAAIE,EAAAA,EAAAA,IAnCGC,EAVF,EAWTZ,EAAMa,MAAMT,EAAaA,EAAcQ,GAAME,KAAI,CAACC,EAAMC,KAC7D,MAAM,mBAAEC,GAAuBF,GACzB,GAAEG,EAAE,QAAEC,GAAYJ,EAAKK,qBACvB,KAAEC,GAASN,EAAKK,oBAAoBE,QACpC,MAAEC,EAAK,KAAEC,GAAST,EAAKK,oBAAoBK,YAC3CC,EAXYL,IACfA,EAAKM,MAAM,KAAKd,MAAM,GAAI,GAAGe,KAAK,KAUhBC,CAAeR,KAASS,EAAAA,EAAAA,MAC7C,OACEC,EAAAA,cAACC,EAAAA,KAAI,CACHC,IAAKf,EACLgB,GAAK,IAAGjB,IAAqBI,IAC7Bc,MAAO,CAAEC,MAAO,YAEhBL,EAAAA,cAAA,OACEM,IAAWC,IAANtB,EAAwBd,EAAgB,KAC7CqC,UAAU,uBAEVR,EAAAA,cAAA,OAAKQ,UAAU,mBAAmBhB,GAClCQ,EAAAA,cAAA,OAAKQ,UAAU,kBACbR,EAAAA,cAAA,OAAKQ,UAAU,eAAcC,EAAAA,EAAAA,GAAWd,IACxCK,EAAAA,cAAA,OAAKQ,UAAU,cAAa,KAC5BR,EAAAA,cAACU,EAAAA,EAAI,CAACF,UAAU,iBAAiBf,KAAMA,KAEzCO,EAAAA,cAAA,OACEQ,UAAU,oBACVG,wBAAyB,CACvBC,OAAQxB,MAIT,OA9BOP,KAmCyB,GAC3C,GACD,CAACR,IAEJ,MAAMwC,EAAcC,MAAAC,EAAgBC,KAAc,IAAtBC,GAAMF,EAC5BE,EAAMC,iBACR5C,GAAgB6C,GAAQA,EAnDR,IAoDhBH,EAASI,UAAUH,EAAMI,QAC3B,EAcF,OAXA5C,EAAAA,EAAAA,YAAU,KACR,IAAIuC,EAOJ,OANI9C,IACF8C,EAAW,IAAIM,qBAAqBT,EAAa,CAC/CU,UAAW,KAEbP,EAASQ,QAAQtD,IAEZ,IAAM8C,GAAYA,EAASS,YAAY,GAC7C,CAACvD,IAEG8B,EAAAA,cAAAA,EAAAA,SAAA,KAAGzB,EAAc,C,4HC1C1B,UAvBcP,IAAe,IAAd,KAAE0D,GAAM1D,EACrB,MAAM2D,GAAmB5B,EAAAA,EAAAA,MACnB6B,GAAWnB,EAAAA,EAAAA,GAAWkB,GACtB1D,EAAQyD,EAAKzD,MAAM4D,MACnBC,EAAaJ,EAAKI,WAAWD,MAInC,OACE7B,EAAAA,cAAC+B,EAAAA,EAAM,CAACC,QAASL,GACf3B,EAAAA,cAACiC,EAAAA,EAAG,CAACzC,MAAOoC,IACZ5B,EAAAA,cAACkC,EAAAA,EAAO,CAACJ,WAAYA,EAAYK,oBAAqBR,IACtD3B,EAAAA,cAACoC,EAAAA,EAAS,CAAC5C,MAAOoC,IAClB5B,EAAAA,cAACqC,EAAAA,EAAe,CAACC,YAPnB,gGAQEtC,EAAAA,cAACjC,EAAAA,EAAS,CAACE,MAAOA,IACX,C","sources":["webpack://gatsby-starter-oasis/./src/components/PostItems/index.jsx","webpack://gatsby-starter-oasis/./src/pages/develop/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useTopLevelPathName } from '../../hooks'\nimport { capitalize } from '../../utils/capitalize'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport { Date } from '../Elements'\n\nimport './index.scss'\n\nconst PostItems = ({ posts }) => {\n  const baseOfSlice = 5\n  const [targetElem, setTargetElem] = useState(null)\n  const [targetIndex, setTargetIndex] = useState(0)\n  const [renderList, setRenderList] = useState([])\n\n  const slugToCategory = (slug) => {\n    return slug.split('/').slice(1, -2).join('/')\n  }\n\n  useEffect(() => {\n    const slicedItem = (base) => {\n      return posts.slice(targetIndex, targetIndex + base).map((post, i) => {\n        const { sourceInstanceName } = post\n        const { id, excerpt } = post.childMarkdownRemark\n        const { slug } = post.childMarkdownRemark.fields\n        const { title, date } = post.childMarkdownRemark.frontmatter\n        const categoryName = slugToCategory(slug) || useTopLevelPathName()\n        return (\n          <Link\n            key={id}\n            to={`/${sourceInstanceName}${slug}`}\n            style={{ color: 'inherit' }}\n          >\n            <div\n              ref={i === baseOfSlice - 1 ? setTargetElem : null}\n              className=\"post-item-container\"\n            >\n              <div className=\"post-item-title\">{title}</div>\n              <div className=\"post-item-info\">\n                <div className=\"is-primary\">{capitalize(categoryName)}</div>\n                <div className=\"is-primary\">|</div>\n                <Date className=\"post-item-date\" date={date} />\n              </div>\n              <div\n                className=\"post-item-excerpt\"\n                dangerouslySetInnerHTML={{\n                  __html: excerpt,\n                }}\n              />\n            </div>\n          </Link>\n        )\n      })\n    }\n    setRenderList((list) => {\n      return [...list, ...slicedItem(baseOfSlice)]\n    })\n  }, [targetIndex])\n\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting) {\n      setTargetIndex((idx) => idx + baseOfSlice)\n      observer.unobserve(entry.target)\n    }\n  }\n\n  useEffect(() => {\n    let observer\n    if (targetElem) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.3,\n      })\n      observer.observe(targetElem)\n    }\n    return () => observer && observer.disconnect()\n  }, [targetElem])\n\n  return <>{renderList}</>\n}\n\nPostItems.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n}\n\nexport { PostItems }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport { Layout } from '../../components/Layout'\nimport { Seo } from '../../components/Seo'\nimport { Sidebar } from '../../components/Sidebar'\nimport { PostItems } from '../../components/PostItems'\nimport { PageDescription } from '../../components/PageDescription'\nimport { PageTitle } from '../../components/PageTitle'\nimport { capitalize } from '../../utils/capitalize'\nimport { useTopLevelPathName } from '../../hooks'\n\nconst Index = ({ data }) => {\n  const topLevelPathName = useTopLevelPathName()\n  const pageName = capitalize(topLevelPathName)\n  const posts = data.posts.nodes\n  const directorys = data.directorys.nodes\n  const description =\n    'It contains posts about concepts and troubleshooting processes required during development.'\n\n  return (\n    <Layout belongs={topLevelPathName}>\n      <Seo title={pageName} />\n      <Sidebar directorys={directorys} currentCategoryName={topLevelPathName} />\n      <PageTitle title={pageName} />\n      <PageDescription description={description} />\n      <PostItems posts={posts} />\n    </Layout>\n  )\n}\n\nIndex.propTypes = {\n  data: PropTypes.object,\n}\n\nexport default Index\n\nexport const qurey = graphql`\n  query DevelopPage {\n    directorys: allDirectory(\n      filter: {\n        sourceInstanceName: { eq: \"develop\" }\n        relativeDirectory: { regex: \"/^$|^\\\\.\\\\.$/\" }\n      }\n      sort: { order: DESC, fields: relativeDirectory }\n    ) {\n      nodes {\n        id\n        name\n      }\n    }\n    posts: allFile(\n      filter: {\n        sourceInstanceName: { eq: \"develop\" }\n        absolutePath: { regex: \"/.md$/\" }\n      }\n      sort: { fields: childrenMarkdownRemark___frontmatter___date, order: DESC }\n    ) {\n      nodes {\n        sourceInstanceName\n        childMarkdownRemark {\n          frontmatter {\n            date(formatString: \"MMMM DD , YYYY\")\n            title\n          }\n          fields {\n            slug\n          }\n          excerpt(truncate: true)\n          id\n        }\n      }\n    }\n  }\n`\n"],"names":["PostItems","_ref","posts","targetElem","setTargetElem","useState","targetIndex","setTargetIndex","renderList","setRenderList","useEffect","list","concat","_toConsumableArray","base","slice","map","post","i","sourceInstanceName","id","excerpt","childMarkdownRemark","slug","fields","title","date","frontmatter","categoryName","split","join","slugToCategory","useTopLevelPathName","React","Link","key","to","style","color","ref","baseOfSlice","className","capitalize","Date","dangerouslySetInnerHTML","__html","onIntersect","async","_ref2","observer","entry","isIntersecting","idx","unobserve","target","IntersectionObserver","threshold","observe","disconnect","data","topLevelPathName","pageName","nodes","directorys","Layout","belongs","Seo","Sidebar","currentCategoryName","PageTitle","PageDescription","description"],"sourceRoot":""}