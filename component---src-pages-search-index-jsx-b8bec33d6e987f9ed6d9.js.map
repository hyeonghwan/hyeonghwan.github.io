{"version":3,"file":"component---src-pages-search-index-jsx-b8bec33d6e987f9ed6d9.js","mappings":"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","sources":["webpack://gatsby-starter-oasis/../src/image-utils.ts","webpack://gatsby-starter-oasis/../src/components/hooks.ts","webpack://gatsby-starter-oasis/../src/components/layout-wrapper.tsx","webpack://gatsby-starter-oasis/../src/components/picture.tsx","webpack://gatsby-starter-oasis/../src/components/placeholder.tsx","webpack://gatsby-starter-oasis/../src/components/main-image.tsx","webpack://gatsby-starter-oasis/../src/components/gatsby-image.server.tsx","webpack://gatsby-starter-oasis/../src/components/gatsby-image.browser.tsx","webpack://gatsby-starter-oasis/../src/components/static-image.server.tsx","webpack://gatsby-starter-oasis/../src/components/static-image.tsx","webpack://gatsby-starter-oasis/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://gatsby-starter-oasis/./src/components/Elements/Date/index.jsx","webpack://gatsby-starter-oasis/./src/components/Elements/Title/index.jsx","webpack://gatsby-starter-oasis/./src/components/PageTitle/index.jsx","webpack://gatsby-starter-oasis/./src/components/PostItems/index.jsx","webpack://gatsby-starter-oasis/./src/components/SearchBar/index.jsx","webpack://gatsby-starter-oasis/./node_modules/@toss/hangul/esm/constants.mjs","webpack://gatsby-starter-oasis/./node_modules/@toss/hangul/esm/_virtual/_rollupPluginBabelHelpers.mjs","webpack://gatsby-starter-oasis/./node_modules/@toss/hangul/esm/disassembleCompleteHangulCharacter.mjs","webpack://gatsby-starter-oasis/./node_modules/@toss/hangul/esm/disassemble.mjs","webpack://gatsby-starter-oasis/./node_modules/@toss/hangul/esm/utils.mjs","webpack://gatsby-starter-oasis/./node_modules/@toss/hangul/esm/chosungIncludes.mjs","webpack://gatsby-starter-oasis/./src/pages/search/index.jsx"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nconst Date = ({ date, className, ...rest }) => {\n  return (\n    <div className={classNames('date', className)} {...rest}>\n      {date}\n    </div>\n  )\n}\n\nDate.propTypes = {\n  date: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n}\n\nexport { Date }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Title = ({ title, ...rest }) => {\n  return <h1 {...rest}>{title}</h1>\n}\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n}\n\nexport { Title }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { useProfileImg, useMetadata } from '../../hooks'\nimport { Title } from '../Elements'\nimport './index.scss'\n\nconst PageTitle = ({ title }) => {\n  const profileImg = useProfileImg()\n  const { author } = useMetadata()\n  return (\n    <div className=\"page-title\">\n      <div className=\"page-title-profile-img\">\n        <GatsbyImage image={profileImg} alt={author} />\n      </div>\n      <Title title={title} />\n    </div>\n  )\n}\n\nPageTitle.propTypes = {\n  title: PropTypes.string,\n}\n\nexport { PageTitle }\n","import React, { useState, useEffect } from 'react'\nimport { useTopLevelPathName } from '../../hooks'\nimport { capitalize } from '../../utils/capitalize'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport { Date } from '../Elements'\n\nimport './index.scss'\n\nconst PostItems = ({ posts }) => {\n  const baseOfSlice = 5\n  const [targetElem, setTargetElem] = useState(null)\n  const [targetIndex, setTargetIndex] = useState(0)\n  const [renderList, setRenderList] = useState([])\n\n  const slugToCategory = (slug) => {\n    return slug.split('/').slice(1, -2).join('/')\n  }\n\n  useEffect(() => {\n    const slicedItem = (base) => {\n      return posts.slice(targetIndex, targetIndex + base).map((post, i) => {\n        const { sourceInstanceName } = post\n        const { id, excerpt } = post.childMarkdownRemark\n        const { slug } = post.childMarkdownRemark.fields\n        const { title, date } = post.childMarkdownRemark.frontmatter\n        const categoryName = slugToCategory(slug) || useTopLevelPathName()\n        return (\n          <Link\n            key={id}\n            to={`/${sourceInstanceName}${slug}`}\n            style={{ color: 'inherit' }}\n          >\n            <div\n              ref={i === baseOfSlice - 1 ? setTargetElem : null}\n              className=\"post-item-container\"\n            >\n              <div className=\"post-item-title\">{title}</div>\n              <div className=\"post-item-info\">\n                <div className=\"is-primary\">{capitalize(categoryName)}</div>\n                <div className=\"is-primary\">|</div>\n                <Date className=\"post-item-date\" date={date} />\n              </div>\n              <div\n                className=\"post-item-excerpt\"\n                dangerouslySetInnerHTML={{\n                  __html: excerpt,\n                }}\n              />\n            </div>\n          </Link>\n        )\n      })\n    }\n    setRenderList((list) => {\n      return [...list, ...slicedItem(baseOfSlice)]\n    })\n  }, [targetIndex])\n\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting) {\n      setTargetIndex((idx) => idx + baseOfSlice)\n      observer.unobserve(entry.target)\n    }\n  }\n\n  useEffect(() => {\n    let observer\n    if (targetElem) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.3,\n      })\n      observer.observe(targetElem)\n    }\n    return () => observer && observer.disconnect()\n  }, [targetElem])\n\n  return <>{renderList}</>\n}\n\nPostItems.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n}\n\nexport { PostItems }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AiOutlineSearch } from 'react-icons/ai'\nimport './index.scss'\nimport { useState } from 'react'\n\nconst SearchBar = ({ value, onChange }) => {\n  return (\n    <div className=\"search-bar-container\">\n      <i>\n        <AiOutlineSearch size={20} />\n      </i>\n      <input\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        type=\"text\"\n        placeholder=\"Title, tag search\"\n      />\n      <div className=\"nav-underline\"></div>\n    </div>\n  )\n}\n\nSearchBar.defaultProps = {}\nSearchBar.propTypes = {\n  onChange: PropTypes.func.isRequired,\n}\n\nexport { SearchBar }\n//\n","/** @tossdocs-ignore */\nvar COMPLETE_HANGUL_START_CHARCODE = '가'.charCodeAt(0);\nvar COMPLETE_HANGUL_END_CHARCODE = '힣'.charCodeAt(0);\nvar NUMBER_OF_JONGSUNG = 28;\nvar NUMBER_OF_JUNGSUNG = 21;\n/**\n * ㄱ -> 'ㄱ'\n * ㄳ -> 'ㄱㅅ' 으로 나눈다.\n */\n\nvar DISASSEMBLED_CONSONANTS_BY_CONSONANT = {\n  // 종성이 없는 경우 '빈' 초성으로 관리하는 것이 편리하여, 빈 문자열도 포함한다.\n  '': '',\n  ㄱ: 'ㄱ',\n  ㄲ: 'ㄲ',\n  ㄳ: 'ㄱㅅ',\n  ㄴ: 'ㄴ',\n  ㄵ: 'ㄴㅈ',\n  ㄶ: 'ㄴㅎ',\n  ㄷ: 'ㄷ',\n  ㄸ: 'ㄸ',\n  ㄹ: 'ㄹ',\n  ㄺ: 'ㄹㄱ',\n  ㄻ: 'ㄹㅁ',\n  ㄼ: 'ㄹㅂ',\n  ㄽ: 'ㄹㅅ',\n  ㄾ: 'ㄹㅌ',\n  ㄿ: 'ㄹㅍ',\n  ㅀ: 'ㄹㅎ',\n  ㅁ: 'ㅁ',\n  ㅂ: 'ㅂ',\n  ㅃ: 'ㅃ',\n  ㅄ: 'ㅂㅅ',\n  ㅅ: 'ㅅ',\n  ㅆ: 'ㅆ',\n  ㅇ: 'ㅇ',\n  ㅈ: 'ㅈ',\n  ㅉ: 'ㅉ',\n  ㅊ: 'ㅊ',\n  ㅋ: 'ㅋ',\n  ㅌ: 'ㅌ',\n  ㅍ: 'ㅍ',\n  ㅎ: 'ㅎ'\n};\nvar DISASSEMBLED_VOWELS_BY_VOWEL = {\n  ㅏ: 'ㅏ',\n  ㅐ: 'ㅐ',\n  ㅑ: 'ㅑ',\n  ㅒ: 'ㅒ',\n  ㅓ: 'ㅓ',\n  ㅔ: 'ㅔ',\n  ㅕ: 'ㅕ',\n  ㅖ: 'ㅖ',\n  ㅗ: 'ㅗ',\n  ㅘ: 'ㅗㅏ',\n  ㅙ: 'ㅗㅐ',\n  ㅚ: 'ㅗㅣ',\n  ㅛ: 'ㅛ',\n  ㅜ: 'ㅜ',\n  ㅝ: 'ㅜㅓ',\n  ㅞ: 'ㅜㅔ',\n  ㅟ: 'ㅜㅣ',\n  ㅠ: 'ㅠ',\n  ㅡ: 'ㅡ',\n  ㅢ: 'ㅡㅣ',\n  ㅣ: 'ㅣ'\n};\n/**\n * 초성으로 올 수 있는 한글 글자\n */\n\nvar HANGUL_CHARACTERS_BY_FIRST_INDEX = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n/**\n * 중성으로 올 수 있는 한글 글자\n */\n\nvar HANGUL_CHARACTERS_BY_MIDDLE_INDEX = Object.values(DISASSEMBLED_VOWELS_BY_VOWEL);\n/**\n * 종성으로 올 수 있는 한글 글자\n */\n\nvar HANGUL_CHARACTERS_BY_LAST_INDEX = ['', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'].map(function (consonant) {\n  return DISASSEMBLED_CONSONANTS_BY_CONSONANT[consonant];\n});\n\nexport { COMPLETE_HANGUL_END_CHARCODE, COMPLETE_HANGUL_START_CHARCODE, DISASSEMBLED_CONSONANTS_BY_CONSONANT, DISASSEMBLED_VOWELS_BY_VOWEL, HANGUL_CHARACTERS_BY_FIRST_INDEX, HANGUL_CHARACTERS_BY_LAST_INDEX, HANGUL_CHARACTERS_BY_MIDDLE_INDEX, NUMBER_OF_JONGSUNG, NUMBER_OF_JUNGSUNG };\n","function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nexport { _arrayLikeToArray as arrayLikeToArray, _arrayWithHoles as arrayWithHoles, _arrayWithoutHoles as arrayWithoutHoles, _createForOfIteratorHelper as createForOfIteratorHelper, _iterableToArray as iterableToArray, _iterableToArrayLimit as iterableToArrayLimit, _nonIterableRest as nonIterableRest, _nonIterableSpread as nonIterableSpread, _slicedToArray as slicedToArray, _toConsumableArray as toConsumableArray, _unsupportedIterableToArray as unsupportedIterableToArray };\n","import { HANGUL_CHARACTERS_BY_FIRST_INDEX, HANGUL_CHARACTERS_BY_MIDDLE_INDEX, HANGUL_CHARACTERS_BY_LAST_INDEX, COMPLETE_HANGUL_START_CHARCODE, COMPLETE_HANGUL_END_CHARCODE, NUMBER_OF_JONGSUNG, NUMBER_OF_JUNGSUNG } from './constants.mjs';\n\n/** @tossdocs-ignore */\nfunction disassembleCompleteHangulCharacter(letter) {\n  var charCode = letter.charCodeAt(0);\n  var isCompleteHangul = COMPLETE_HANGUL_START_CHARCODE <= charCode && charCode <= COMPLETE_HANGUL_END_CHARCODE;\n\n  if (!isCompleteHangul) {\n    return undefined;\n  }\n\n  var hangulCode = charCode - COMPLETE_HANGUL_START_CHARCODE;\n  var lastIndex = hangulCode % NUMBER_OF_JONGSUNG;\n  var middleIndex = (hangulCode - lastIndex) / NUMBER_OF_JONGSUNG % NUMBER_OF_JUNGSUNG;\n  var firstIndex = Math.floor((hangulCode - lastIndex) / NUMBER_OF_JONGSUNG / NUMBER_OF_JUNGSUNG);\n  return {\n    first: HANGUL_CHARACTERS_BY_FIRST_INDEX[firstIndex],\n    middle: HANGUL_CHARACTERS_BY_MIDDLE_INDEX[middleIndex],\n    last: HANGUL_CHARACTERS_BY_LAST_INDEX[lastIndex]\n  };\n}\n\nexport { disassembleCompleteHangulCharacter };\n","import { createForOfIteratorHelper as _createForOfIteratorHelper, toConsumableArray as _toConsumableArray } from './_virtual/_rollupPluginBabelHelpers.mjs';\nimport { DISASSEMBLED_CONSONANTS_BY_CONSONANT, DISASSEMBLED_VOWELS_BY_VOWEL } from './constants.mjs';\nimport { disassembleCompleteHangulCharacter } from './disassembleCompleteHangulCharacter.mjs';\n\nfunction disassembleHangulToGroups(str) {\n  /*\n   * FIXME(@raon0211):\n   * Array#map을 사용하는 경우 Safari에서 'Array size is not a small enough positive integer' 오류가 발생함.\n   * 우선 map을 사용하지 않음으로써 문제를 회피함\n   * @see https://sentry.io/organizations/toss/issues/2432344954/?project=1242586&referrer=slack\n   * @see https://bugs.webkit.org/show_bug.cgi?id=211619\n   */\n  var result = [];\n\n  var _iterator = _createForOfIteratorHelper(str),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var letter = _step.value;\n      var disassembledComplete = disassembleCompleteHangulCharacter(letter);\n\n      if (disassembledComplete != null) {\n        result.push([].concat(_toConsumableArray(disassembledComplete.first), _toConsumableArray(disassembledComplete.middle), _toConsumableArray(disassembledComplete.last)));\n        continue;\n      }\n\n      var disassembledConsonant = DISASSEMBLED_CONSONANTS_BY_CONSONANT[letter];\n\n      if (disassembledConsonant != null) {\n        result.push(_toConsumableArray(disassembledConsonant));\n        continue;\n      }\n\n      var disassembledVowel = DISASSEMBLED_VOWELS_BY_VOWEL[letter];\n\n      if (disassembledVowel != null) {\n        result.push(_toConsumableArray(disassembledVowel));\n        continue;\n      }\n\n      result.push([letter]);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\nfunction disassembleHangul(str) {\n  return disassembleHangulToGroups(str).reduce(function (hanguls, disassembleds) {\n    return \"\".concat(hanguls).concat(disassembleds.join(''));\n  }, '');\n}\n\nexport { disassembleHangul, disassembleHangulToGroups };\n","import { slicedToArray as _slicedToArray } from './_virtual/_rollupPluginBabelHelpers.mjs';\nimport { disassembleHangulToGroups } from './disassemble.mjs';\nimport { disassembleCompleteHangulCharacter } from './disassembleCompleteHangulCharacter.mjs';\n\n/**\n * @name hasBatchim\n * @description\n * 한글 문자열의 마지막 글자가 받침이 있는지 확인합니다.\n * ```typescript\n * hasBatchim(\n *   // 글자에 받침이 있는지 확인하고 싶은 문자열\n *   str: string\n * ): boolean\n * ```\n * @example\n * hasBatchim('값') // true\n * hasBatchim('토') // false\n */\n\nfunction hasBatchim(str) {\n  var lastChar = str[str.length - 1];\n  var disassembled = disassembleCompleteHangulCharacter(lastChar);\n  return disassembled != null && disassembled.last !== '';\n}\n/**\n * @name getFirstConsonants\n * @description\n * 단어에서 초성을 추출합니다. (예: `토스` -> `'ㅌㅅ'`)\n * ```typescript\n * getFirstConsonants(\n *   // 초성을 추출할 단어\n *   word: string\n * ): string\n * ```\n * @example\n * getFirstConsonants('토스') // 'ㅌㅅ'\n * getFirstConsonants('리액트') // 'ㄹㅇㅌ'\n * getFirstConsonants('띄어 쓰기') // 'ㄸㅇ ㅆㄱ'\n */\n\nfunction getFirstConsonants(word) {\n  return disassembleHangulToGroups(word).reduce(function (firstConsonants, _ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        consonant = _ref2[0];\n\n    return \"\".concat(firstConsonants).concat(consonant);\n  }, '');\n}\n\nexport { getFirstConsonants, hasBatchim };\n","import { HANGUL_CHARACTERS_BY_FIRST_INDEX } from './constants.mjs';\nimport { disassembleHangulToGroups } from './disassemble.mjs';\nimport { getFirstConsonants } from './utils.mjs';\n\n/** @tossdocs-ignore */\nfunction chosungIncludes(x, y) {\n  if (!isOnlyInitialConsonant(y)) {\n    return false;\n  }\n\n  var initialConsonantsX = getFirstConsonants(x).replace(/\\s/g, '');\n  var initialConsonantsY = getFirstConsonants(y).replace(/\\s/g, '');\n  return initialConsonantsX.includes(initialConsonantsY);\n}\n/*\n * @description 한글초성으로만 주어진 경우\n */\n\nfunction isOnlyInitialConsonant(str) {\n  return disassembleHangulToGroups(str).every(function (disassembled) {\n    var _disassembled$;\n\n    return disassembled.length === 1 && HANGUL_CHARACTERS_BY_FIRST_INDEX.includes((_disassembled$ = disassembled[0]) !== null && _disassembled$ !== void 0 ? _disassembled$ : '');\n  });\n}\n\nexport { chosungIncludes };\n","import React from 'react'\nimport { Layout } from '../../components/Layout'\nimport { Seo } from '../../components/Seo'\nimport { PostItems } from '../../components/PostItems'\nimport { PageTitle } from '../../components/PageTitle'\nimport { useTopLevelPathName } from '../../hooks'\nimport { capitalize } from '../../utils/capitalize'\nimport { useAllPosts } from '../../hooks'\nimport { SearchBar } from '../../components/SearchBar'\nimport { useState } from 'react'\nimport { useEffect } from 'react'\nimport { chosungIncludes } from '@toss/hangul'\n\nconst SearchPage = () => {\n  const data = useAllPosts()\n  const [searchKey, setSearchKey] = useState('')\n  const [filteredData, setFilteredDate] = useState([])\n\n  const topLevelPathName = useTopLevelPathName()\n  const pageName = capitalize(topLevelPathName)\n\n  useEffect(() => {\n    const posts = data || []\n    if (!searchKey.length) {\n      setFilteredDate([])\n      return\n    }\n    const filteredData = posts.filter((post) => {\n      const { desc, title, tags, tech } = post.childMarkdownRemark.frontmatter\n      return (\n        (desc && desc.toLowerCase().includes(searchKey.toLowerCase())) ||\n        (desc && chosungIncludes(desc, searchKey)) ||\n        (title && title.toLowerCase().includes(searchKey.toLowerCase())) ||\n        (title && chosungIncludes(title, searchKey)) ||\n        (tags && tags.toLowerCase().includes(searchKey)) ||\n        (tags && chosungIncludes(tags, searchKey)) ||\n        (tech && tech.toLowerCase().includes(searchKey)) ||\n        (tech && chosungIncludes(tech, searchKey))\n      )\n    })\n    setFilteredDate(filteredData)\n  }, [searchKey])\n\n  return (\n    <Layout belongs={topLevelPathName}>\n      <Seo title={pageName} />\n      <PageTitle title=\"Search Post\" />\n      <SearchBar value={searchKey} onChange={setSearchKey} />\n      <PostItems key={filteredData.length} posts={filteredData} />\n    </Layout>\n  )\n}\nSearchPage.defaultProps = {}\nSearchPage.propTypes = {}\n\nexport default SearchPage\n"],"names":["N","height","HTMLImageElement","prototype","j","e","t","a","i","r","u","loading","shouldLoad","style","opacity","O","n","s","o","l","backgroundColor","width","position","top","left","bottom","right","objectFit","objectPosition","d","transition","z","D","_ref5","layout","paddingTop","maxWidth","display","alt","role","src","A","children","c","q","P","H","srcSet","decoding","G","fallback","sources","sizes","length","map","_ref6","media","type","key","V","propTypes","isRequired","displayName","B","F","Error","U","Y","_len","arguments","Array","_key","h","apply","concat","X","image","J","Z","K","Set","Q","ee","te","as","className","class","g","onStartLoad","p","onLoad","m","onError","f","w","y","b","v","E","M","k","S","$","I","JSON","stringify","images","x","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","add","has","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","ie","re","_len2","_key2","ne","se","oe","__imageData","__error","console","warn","camelCase","input","options","isArray","TypeError","Object","assign","pascalCase","trim","filter","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","preserveCamelCase","replace","_","p1","charAt","module","exports","Date","_ref","date","rest","React","classNames","Title","title","PageTitle","profileImg","useProfileImg","author","useMetadata","GatsbyImage","PostItems","posts","targetElem","setTargetElem","useState","targetIndex","setTargetIndex","renderList","setRenderList","useEffect","list","_toConsumableArray","base","post","sourceInstanceName","id","excerpt","childMarkdownRemark","slug","fields","frontmatter","categoryName","split","slugToCategory","useTopLevelPathName","Link","to","color","baseOfSlice","capitalize","onIntersect","async","_ref2","observer","entry","isIntersecting","idx","unobserve","target","IntersectionObserver","threshold","observe","disconnect","SearchBar","value","onChange","AiOutlineSearch","size","placeholder","defaultProps","COMPLETE_HANGUL_START_CHARCODE","charCodeAt","COMPLETE_HANGUL_END_CHARCODE","NUMBER_OF_JONGSUNG","NUMBER_OF_JUNGSUNG","DISASSEMBLED_CONSONANTS_BY_CONSONANT","DISASSEMBLED_VOWELS_BY_VOWEL","HANGUL_CHARACTERS_BY_FIRST_INDEX","HANGUL_CHARACTERS_BY_MIDDLE_INDEX","values","HANGUL_CHARACTERS_BY_LAST_INDEX","consonant","_slicedToArray","arr","_arrayWithHoles","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","_nonIterableSpread","minLen","toString","constructor","name","len","arr2","letter","charCode","hangulCode","lastIndex","middleIndex","firstIndex","Math","floor","first","middle","last","disassembleHangulToGroups","str","_step","result","_iterator","allowArrayLike","it","normalCompletion","didErr","step","return","_createForOfIteratorHelper","disassembledComplete","disassembledConsonant","disassembledVowel","getFirstConsonants","word","reduce","firstConsonants","chosungIncludes","every","disassembled","_disassembled$","includes","initialConsonantsX","initialConsonantsY","SearchPage","data","useAllPosts","searchKey","setSearchKey","filteredData","setFilteredDate","topLevelPathName","pageName","desc","tags","tech","Layout","belongs","Seo"],"sourceRoot":""}