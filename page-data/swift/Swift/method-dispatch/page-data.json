{"componentChunkName":"component---src-templates-index-jsx","path":"/swift/Swift/method-dispatch/","result":{"data":{"directorys":{"nodes":[{"id":"48b2490f-4b29-5daf-8c31-6814dc5a3ea0","name":"swift"},{"id":"3a43ee12-a97f-57da-96b6-0b10905c7d68","name":"CodingTest"},{"id":"b374b720-eb2b-5cb4-9e9b-26bf1f845e2e","name":"Swift"}]},"markdown":{"html":"<h1 id=\"method-dispatch\" style=\"position:relative;\"><a href=\"#method-dispatch\" aria-label=\"method dispatch permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Method Dispatch</h1>\n<ul>\n<li>method Dispatch 는 인스턴스에 직접 접근하여 호출하는 Static Dispatch</li>\n<li>다형성을 구현하기 위한 Dynamic Dispatch 가 있습니다.</li>\n</ul>\n<p>Swift 는 기본적으로 정적 Disaptch 하는 것으로 알고 있습니다. <br>\n하지만 기본적으로 클래스의 상속이나 프로토콜 컴포지션을 사용할때 다형성을 구현하기 위해서는 동적으로 작동할 필요가 있습니다. <br></p>\n<blockquote>\n<p>즉 <strong>컴파일</strong> 타임에 호출하는 함수가 결정이 되느냐 <strong>런타임</strong> 에 실행하는 함수 가 결정 되는지에 차이가 있게됩니다.\n-> 당현히 <strong>컴파일</strong> 시점이 아닌 <strong>런타임</strong>에서 어떤 구현을 사용해야 하는지 찾아가는 <strong>오버헤드</strong>로 인해서 <strong>Dynamic Dispatch</strong> 는 어느 정도 성능 하락이 필연시 하게 되지만 <strong>다형성</strong>을 제공하여  코드를 유연하게 작성할 수 있는 큰 강점이 있습니다. 하지만 성능 이 중요한 코드를 작성할 때는 이러한 차이와 관점을 이해하면서 코드를 작성하는 것이 중요합니다.</p>\n</blockquote>\n<ul>\n<li>Swift에 메서드 디스패치에 대한 이야기를 함에 앞서 기존에 Objective-C 에서는 어떻게 Method Dispatch 를 진행하는지 알아보겠습니다.</li>\n</ul>\n<h1 id=\"objectvie-c-method-dispatching\" style=\"position:relative;\"><a href=\"#objectvie-c-method-dispatching\" aria-label=\"objectvie c method dispatching permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Objectvie-C Method Dispatching</h1>\n<p>Objective-C에 대해서 많이 알지는 못하지만, 기본적으로 Objective-C는 C 언어를 기반으로 객체지향, 메시지 전달, 동적으로 객체를 생성하고 메서드를 호출할 수 있는 런타임 환경을 제공하고 , 동적 바인딩을 지원하는 것으로 알고있습니다. (실행 시간에 객체의 타입을 결정)</p>\n<p>Objective-C 또한 컴파일 언어로써 Clang Compiler를 통해서 Object Code로 변환이 됩니다.</p>\n<p>Objective-C 에서는 함수를 호출하는 언어만의 방법이 존재합니다.\nobjc_msgSend 함수를 사용해서 객체와, Selector 를 이용해서 객체가 구현한 메서드를 Selector로 런타임에 메시지를 보내 검색하는 방식으로 알고 있습니다.</p>\n<p>method Call 을 할때 컴파일러는 function의 Objc_msgSend 를 생성하여 객체에게 전달합니다.</p>\n<ul>\n<li>Selector(SEL) :메서드를 식별하기 위한 함수의 문자열</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">id <span class=\"token function\">objc_msgSend</span><span class=\"token punctuation\">(</span>id obj<span class=\"token punctuation\">,</span> <span class=\"token constant\">SEL</span> op<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token function\">object_getClass</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token constant\">IMP</span> imp <span class=\"token operator\">=</span> <span class=\"token class-name\">CacheLookup</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>imp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> imp <span class=\"token operator\">=</span> <span class=\"token function\">class_getMethodImplementation</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    jump <span class=\"token function\">imp</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드는 작동방식을 단순화 하여 설명하기 위한 코드입니다.(구현부 아님)\nobjc_msgSend 는 id(인스턴스) SEL(함수 식별 문자열) 을 인자로 받아서</p>\n<ol>\n<li>인스턴스의 메타타입을 가져옵니다.</li>\n<li>CacheLookup 을 통해서 메타타입에 있는 메서드를 검색합니다.\n<ul>\n<li>메서드 가 캐시에 존재하지 않는다면 Class Type와 SEL 로 mehtod의 구현부를 가져옵니다.</li>\n</ul>\n</li>\n<li>인스턴스 함수의 구현부로 jump 합니다. (jump-> 호출이라기 보다는 구현부로 실행흐름을 이동시키는 것 이라고 생각합니다.)</li>\n</ol>\n<blockquote>\n<p>Objective-C 에 대한 함수호출은 objc_msgSend로 인스턴스의 메타타입 검색 캐시 조회 함수 구현부로 이동 이러한 과정을 거치게 되어 Swift에 비해 상당히 느립니다..</p>\n</blockquote>\n<h2 id=\"name-mangling\" style=\"position:relative;\"><a href=\"#name-mangling\" aria-label=\"name mangling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Name Mangling</h2>\n<p>Swift 는 다양한 곳에서 같은 이름을 가진 struct 나 class 를 가질 수 있습니다.\n물론 같은 레벨에서는 허용하지 않습니다. (다른 모듈이나 , 중첩 구조에서 허용)\n이러한 이유는 컴파일 과정에서 Name Mangling 을 통해서 고유하게 식별하도록 선언한 클래스나 struct 등의 name을 고유하게 만들기 때문입니다.</p>\n<ul>\n<li>Object file 을 합칠때 Linker 가 이런 심볼들로 외부 reference 참조를 해결(<strong>여러 소스 파일 간에 정의된 클래스, 함수 등 상호간에 재대로 매칭되어 하나의 실행 가능한 파일이 생성될 수 있도록 하는 과정</strong>) 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// module CommonUI</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Toast</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">message</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> str<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//implemention</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">message</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> num<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token comment\">//implemention</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">message</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token comment\">//implemention</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>예를 들어서 CommonUI 모듈에 Toast 객체가 message 함수를 가지고 있다고 하면<br></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">CommonUI</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonUI</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Swift</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">CommonUI</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span>\n<span class=\"token class-name\">CommonUI</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonUI</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Swift</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">CommonUI</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span>\n<span class=\"token class-name\">CommonUI</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonUI</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">CommonUI</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span></code></pre></div>\n<blockquote>\n<p>함수를 호출할때 Type 과 인자를 넘기는 형식으로 함수가 구현 될 것입니다.\n실제 개발할때는 Class 의 meta Type을 넘기지 않고 자동으로 컴파일러에 의해서 추론되어 컴파일 과정에서 생성이 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> toast1 <span class=\"token operator\">=</span> <span class=\"token class-name\">CommonUI</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> toast2 <span class=\"token operator\">=</span> <span class=\"token constant\">CMUI</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">CommonUIs6Toast25ToastCACycfC</span>\t<span class=\"token comment\">// CommonUI Toast.__allocating_init()</span>\n<span class=\"token class-name\">CMUIs6Toast25ToastCACycfC</span>\t    <span class=\"token comment\">// CMUI Toast.__allocating_init()</span></code></pre></div>\n<p>이런 함수들을 식별하기 위해서는 특정한 name을 가진 <strong>symbol</strong>을 만들게 됩니다. (name mangling)\n모듈, 타입, 함수 , 인자 -> 이런 특정 요소들을 섞어서 고유한 심볼을 생성하게 됩니다.\n예를 들어 오버로딩이나 오버라이딩 하여 함수를 구현할때 식별하기 위함입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">xcrun swift<span class=\"token operator\">-</span>demangle s5ToastAAC7messageyABXDSSF\n$s5ToastAAC7messageyABXDSSF <span class=\"token operator\">---></span> <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Swift</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">Self</span>\n<span class=\"token comment\">// mangle 된 심볼을 demangle 하여 어떤 심볼인지도 확인 가능합니다.</span>\n<span class=\"token comment\">// 현재는 단일파일로 sil을 생성해서 Toast class의 파일명이 앞에 붙어있습니다.</span></code></pre></div>\n<blockquote>\n<p>요약하면 Swift 에서는 컴파일 과정 sil을 생성할때 메서드의 name mangle을 통해서 고유한 심볼을 생성함으로써 모듈이나 파일간에서 고유한 메서드를 식별하게 됩니다.</p>\n</blockquote>\n<h3 id=\"vtable\" style=\"position:relative;\"><a href=\"#vtable\" aria-label=\"vtable permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vtable</h3>\n<p>어떻게 메서드를 식별하는지 알아봤으니 어떻게 Swift 에서는 Method 가 Dispatch 되는지 알아보겠습니다.</p>\n<p>먼저 상속 구조를 가지고 있는 Toast 클래스를 만들어보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommonToast</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> message<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">nameToast</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">message</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> + </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">님\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">listToast</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> nameList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nameList<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span> name <span class=\"token keyword\">in</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">numToast</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> num<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"price : </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">num</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloToast</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">CommonToast</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"안녕하세요\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">nameToast</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">helloToast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello World\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>String, [String], Int 를 인자로 가지는 함수 3개를 정의 하고 있는 CommonToast Class</li>\n<li>CommonToast 를 상속하고 String 인자를 받는 함수를 오버라이드 재정의 하고 추가로 helloMessage 함수를 정의 하였습니다.</li>\n</ul>\n<p>Sil 을 생성해서 Vtable 을 확인해 보면</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">sil_vtable <span class=\"token class-name\">CommonToast</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token other-directive property\">#CommonToast</span><span class=\"token punctuation\">.</span>nameToast<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonToast</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> @$s5Toast06CommonA0C04nameA0yySSF\t<span class=\"token comment\">// CommonToast.nameToast(_:)</span>\n  <span class=\"token other-directive property\">#CommonToast</span><span class=\"token punctuation\">.</span>listToast<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonToast</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> @$s5Toast06CommonA0C04listA0yySaySSGF\t<span class=\"token comment\">// CommonToast.listToast(_:)</span>\n  <span class=\"token other-directive property\">#CommonToast</span><span class=\"token punctuation\">.</span>numToast<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonToast</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> @$s5Toast06CommonA0C03numA0yySiF\t<span class=\"token comment\">// CommonToast.numToast(_:)</span>\n<span class=\"token punctuation\">}</span>\n\nsil_vtable <span class=\"token class-name\">HelloToast</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token other-directive property\">#CommonToast</span><span class=\"token punctuation\">.</span>nameToast<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonToast</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> @$s5Toast05HelloA0C04nameA0yySSF <span class=\"token punctuation\">[</span><span class=\"token keyword\">override</span><span class=\"token punctuation\">]</span>\t<span class=\"token comment\">// HelloToast.nameToast(_:)</span>\n  <span class=\"token other-directive property\">#CommonToast</span><span class=\"token punctuation\">.</span>listToast<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonToast</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> @$s5Toast06CommonA0C04listA0yySaySSGF <span class=\"token punctuation\">[</span>inherited<span class=\"token punctuation\">]</span>\t<span class=\"token comment\">// CommonToast.listToast(_:)</span>\n  <span class=\"token other-directive property\">#CommonToast</span><span class=\"token punctuation\">.</span>numToast<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonToast</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> @$s5Toast06CommonA0C03numA0yySiF <span class=\"token punctuation\">[</span>inherited<span class=\"token punctuation\">]</span>\t<span class=\"token comment\">// CommonToast.numToast(_:)</span>\n  <span class=\"token other-directive property\">#HelloToast</span><span class=\"token punctuation\">.</span>helloToast<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloToast</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> @$s5Toast05HelloA0C05helloA0yyF\t<span class=\"token comment\">// HelloToast.helloToast()</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<blockquote>\n<p>message함수 를 제외한 init, deinit, getter setter 는 제외 하였습니다.</p>\n</blockquote>\n<p>HelloToast Class 은 CommonToast Class 의 함수를 상속받아 Vtable에 추가로 정의되었습니다.\n각 함수의 인자로 넘기는 메타타입을 보면 상속받거나 재정의 한 함수는 부모의 메타타입을 인자로 넘기고 새롭게 생성한 메서드는 자기 자신의 타입을 넘기게됩니다.</p>\n<ul>\n<li>nameMangling 된 심볼을 보면 재정의된 함수에서는 Common 이 아닌 Hello가 심볼로 들어간게 보입니다.</li>\n<li>여기서 중요한건 심볼이 다르게 구성이 된다는 것입니다. 실제로 상속받아 vtable에 구현되어져 있는 메서드 에서 재정의 하지 <strong>않은</strong> 메서드는 CommonToast와 symbol 이 동일하게 구성이 되어있습니다.</li>\n<li>각 메서드를 호출할때는 vtable 을 조회하여 dynamic dispatch 로 작동할 것입니다.</li>\n</ul>\n<blockquote>\n<p>swiftc -emit-sil 명령어로 단일 파일에 대해서 sil을 generate 한 것이므로 컴파일러가 최적화를 수행하면 vtable이 아닌 직접접근하여 호출하도록 최적화를 수행하도록 변경될 수 있는 가능성이 존재합니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 추가로 Final 키워드를 적용한 함수를 CommonToast에 정의해보고 sil을 생성해보면</span>\n<span class=\"token comment\">// CommonToast</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">commomToast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"common Toast\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nsil_vtable <span class=\"token class-name\">CommonToast</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token other-directive property\">#CommonToast</span><span class=\"token punctuation\">.</span>nameToast<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonToast</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> @$s5Toast06CommonA0C04nameA0yySSF\t<span class=\"token comment\">// CommonToast.nameToast(_:)</span>\n  <span class=\"token other-directive property\">#CommonToast</span><span class=\"token punctuation\">.</span>listToast<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonToast</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> @$s5Toast06CommonA0C04listA0yySaySSGF\t<span class=\"token comment\">// CommonToast.listToast(_:)</span>\n  <span class=\"token other-directive property\">#CommonToast</span><span class=\"token punctuation\">.</span>numToast<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonToast</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> @$s5Toast06CommonA0C03numA0yySiF\t<span class=\"token comment\">// CommonToast.numToast(_:)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// commonTost 함수는 vtable에 존재하지 않습니다.</span></code></pre></div>\n<blockquote>\n<ul>\n<li>이처럼 final 키워드를 붙어주면 vtable에 생성 되지 않는 것을 볼 수 있습니다.</li>\n<li>특정 class 를 생성할때 final 키워드나 private 을 붙여주게 되면 vtable에 접근하지 않고 인스턴스에 직접 접근하여 호출하게 되므로 dispatch에 대한 오버헤드를 줄 일 수 있습니다.</li>\n<li>Objective-C 에서는 objc_msgSend 함수를 통해 해당 메타타입과 SEL을 통해서 IMP를 조회하여(cache 없으면 getmethodImplementation 호출) jump 하는 방식이었다면</li>\n<li>Swift 의 class 는 sil generation 하는 과정에서 Vtable을 생성하여 메서드에 접근하거나 private 이나 final 키워드가 붙어있으면 vtable에 해당 심볼을 등록하지 않습니다.</li>\n</ul>\n</blockquote>\n<p><strong>static dispatch</strong>: 컴파일 타임에 어떤 함수를 호출할지 정해놔서 빠르게 호출가능\n<br>\n<strong>dynamic dispatch</strong>: 런타임 시점에 어떤 함수를 호출할지 결정해야 함 -> swift는 vtable, objective-C는 objc_msgSend <br>\n<strong>swiftc -emit-sil {filename}</strong> : SIL (swift Intermediate Language) 생성 <br>\n<strong>xcrun swift-demangle {symbolname}</strong> : symbol demangle</p>\n<h2 id=\"etc\" style=\"position:relative;\"><a href=\"#etc\" aria-label=\"etc permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>etc</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Hello Toast 클래스가 만약 final 키워드 없이 내부에 private 을 사용하여 </span>\n<span class=\"token comment\">// method를 작성하면 vtable에 해당 메서드가 등록됩니다.</span>\n\n<span class=\"token comment\">// final 을 함수에 적용하거나 , class 에 적용해야만 </span>\n<span class=\"token comment\">// dynamic dispatch 비용을 줄일 수 있습니다.</span>\n<span class=\"token comment\">// 다형성이 적용되는 부분, 즉 여러 타입으로 접근하여 어떠한 메서드를 호출할지 모르는 </span>\n<span class=\"token comment\">// 가능성이 존재한다면 swift는 vtable에 해당 symbol을 등록 해놓습니다.</span>\n\n<span class=\"token comment\">// 모듈간에 class에 접근제어자, final, private,internal, fileprivte 등</span>\n<span class=\"token comment\">// 컴파일 과정에서 컴파일러는 build Setting 에 따라</span>\n<span class=\"token comment\">//  WMO( 여러 파일을 함께 컴파일 하여 최적화 Whole module Optimization )</span>\n<span class=\"token comment\">// Debug, release 빌드셋팅 다양한 옵션에 영향을 받아 추론하여 똑똑하게 최적화를 수행합니다.</span>\n<span class=\"token comment\">// 단일 모듈 프로젝트가 아니라면 접근제어자로 노출할 속성을 잘 정의하는게 중요합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloToast</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">CommonToast</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"안녕하세요\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">nameToast</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">helloToast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello World\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">privateToast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"private Toast\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","id":"defff733-9d69-56ad-88ae-227430d0d7f9","excerpt":"Method Dispatch method Dispatch 는 인스턴스에 직접 접근하여 호출하는 Static Dispatch 다형성을 구현하기 위한 Dynamic Dispatch…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#method-dispatch\">Method Dispatch</a></p>\n</li>\n<li>\n<p><a href=\"#objectvie-c-method-dispatching\">Objectvie-C Method Dispatching</a></p>\n<ul>\n<li>\n<p><a href=\"#name-mangling\">Name Mangling</a></p>\n<ul>\n<li><a href=\"#vtable\">Vtable</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#etc\">etc</a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/Swift/method-dispatch/"},"frontmatter":{"title":"Method Dispatch","date":"January 12 , 2024","tags":"Swift, Objective-C, Method Dispatch, static, dynamic"}}},"pageContext":{"slug":"/Swift/method-dispatch/","curSrcInsName":"swift","previous":null,"next":{"title":"@Objc @dynamic Attributes","slug":"/Swift/objc_dynamic_attributes/","sourceInstanceName":"swift"}}},"staticQueryHashes":["1603766897","3484302218","993254799"]}